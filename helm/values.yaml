image:
  registry: docker.io
  repository: shanidkh/odoo
  tag: 12

  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

odooEmail: admin

odooPassword: "admin"

loadDemoData: false

# customPostInitScripts:
  # enable-modules.sh: |
  #   #!/bin/bash
  #   echo "Python packages installation"
  #   pip3 install cachetools==4.2.2 boto3==1.17.84 cerberus==1.3.4 pyquerystring==1.1 parse-accept-language==0.1.2 phonenumbers==8.12.28 zxcvbn==4.4.28 pyotp==2.6.0 cryptography==3.4.7 pandas==1.3.2 python-dotenv==0.19.0 numpy==1.21.2 kafka-python==2.0.2 dicttoxml==1.7.4
  #   cp -r /opt/bitnami/python/lib/python3.8/site-packages/* /opt/bitnami/python/lib/python3.8/

allowEmptyPassword: false

extraEnvVars:
  - name: HOST
    value: openg2p-erp-postgresql
  - name: USER
    value: openg2p
  - name: PASSWORD
    value: openg2p
  - name: POSTGRES_DB
    value: openg2p

replicaCount: 1

updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

serviceAccount:
  create: true
  name: ""

extraVolumes:
  - name: odoo-addons
    emptyDir: {}
  - name: odoo-data-master
    persistentVolumeClaim:
      claimName: openg2p-erp12-pv

extraVolumeMounts:
  - name: odoo-addons 
    mountPath: "/mnt/extra-addons"
  - name: odoo-data-master
    mountPath: "/var/lib/odoo"

initContainers:
  - name: fetch-openg2p-addons
    image: busybox
    command: ["/bin/sh", "-c"]
    args:
      ["echo Init container "]
    volumeMounts:
      - name: odoo-addons 
        mountPath: "/mnt/extra-addons"
    securityContext:
      allowPrivilegeEscalation: false
      runAsUser: 0

podAntiAffinityPreset: soft

resources:
  limits: {}
  requests:
    memory: 512Mi
    cpu: 300m

containerPort: 8069

podSecurityContext:
  enabled: false
  fsGroup: 1001

containerSecurityContext:
  allowPrivilegeEscalation: false
  enabled: false
  runAsUser: 0

livenessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 5000
  periodSeconds: 50
  timeoutSeconds: 10
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  path: /
  initialDelaySeconds: 100
  periodSeconds: 30
  timeoutSeconds: 15
  failureThreshold: 6
  successThreshold: 1

startupProbe:
  enabled: false
  path: /
  initialDelaySeconds: 300
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
## @param customLivenessProbe Custom livenessProbe that overrides the default one
##
customLivenessProbe: {}
## @param customReadinessProbe Custom readinessProbe that overrides the default one
#
customReadinessProbe: {}
## @param customStartupProbe Custom startupProbe that overrides the default one
#
customStartupProbe: {}
## @param lifecycleHooks LifecycleHooks to set additional configuration at startup
##
lifecycleHooks: {}
## @param hostAliases Odoo pod host aliases
## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
##
hostAliases: []
## @param podLabels Extra labels for Odoo pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}
## @param podAnnotations Annotations for Odoo pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}
## @param podAffinityPreset Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAffinityPreset: ""
## @param podAntiAffinityPreset Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
##
podAntiAffinityPreset: soft
## Node affinity preset
## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
##
nodeAffinityPreset:
  ## @param nodeAffinityPreset.type Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`
  ##
  type: ""
  ## @param nodeAffinityPreset.key Node label key to match. Ignored if `affinity` is set
  ##
  key: ""
  ## @param nodeAffinityPreset.values Node label values to match. Ignored if `affinity` is set
  ## E.g.
  ## values:
  ##   - e2e-az1
  ##   - e2e-az2
  ##
  values: []
## @param affinity Affinity for pod assignment
## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
## NOTE: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
##
affinity: {}
## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []
## @param topologySpreadConstraints Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/#spread-constraints-for-pods
##
topologySpreadConstraints: {}
## @param podManagementPolicy Pod management policy for the Odoo statefulset
##
podManagementPolicy: Parallel
## @param priorityClassName Odoo pods' Priority Class Name
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""
## @param schedulerName Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
schedulerName: ""
## @param terminationGracePeriodSeconds Seconds Odoo pod needs to terminate gracefully
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
##
terminationGracePeriodSeconds: ""
## @param updateStrategy.type Odoo deployment strategy type
## @param updateStrategy.rollingUpdate Odoo deployment rolling update configuration parameters
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
## NOTE: Set it to `Recreate` if you use a PV that cannot be mounted on multiple pods
## e.g:
## updateStrategy:
##  type: RollingUpdate
##  rollingUpdate:
##    maxSurge: 25%
##    maxUnavailable: 25%
##
updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}
## @param extraVolumes Optionally specify extra list of additional volumes for Odoo pods
##
extraVolumes:
  - name: odoo-addons
    emptyDir: {}
  - name: odoo-data-master
    persistentVolumeClaim:
      claimName: openg2p-odoo-data-master

extraVolumeMounts:
  - name: odoo-addons 
    mountPath: "/mnt/extra-addons"
  - name: odoo-data-master
    mountPath: "/var/lib/odoo"
## @param sidecars Add additional sidecar containers to the Odoo pod
## e.g:
## sidecars:
##   - name: your-image-name
##     image: your-image
##     imagePullPolicy: Always
##     ports:
##       - name: portname
##         containerPort: 1234
##
sidecars: []
## @param initContainers Add additional init containers to the Odoo pods
## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
## e.g:
## initContainers:
##  - name: your-image-name
##    image: your-image
##    imagePullPolicy: Always
##    command: ['sh', '-c', 'copy addons from git and push to /bitnami/odoo/addons. Should work with extraVolumeMounts and extraVolumes']
##
# initContainers:
#   - name: fetch-openg2p-addons
#     image: busybox
#     command: ["/bin/sh", "-c"]
#     args: ["echo Init Container "]
#     volumeMounts:
#       - name: odoo-addons
#         mountPath: "/mnt/extra-addons"
#     securityContext:
#       allowPrivilegeEscalation: false
#       runAsUser: 0

## @section Traffic Exposure Parameters
##

## Odoo service parameters
##
service:
  type: LoadBalancer
  port: 80
  externalTrafficPolicy: Cluster

ingress:
  enabled: false
  selfSigned: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: odoo.local
  path: /
  annotations: {}
  tls: false
  extraHosts: []
  extraPaths: []
  secretName: odoo.local-tls
  extraTls: []
  secrets: []

persistence:
  enabled: true
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  accessMode: ReadWriteOnce
  size: 10Gi
  dataSource: {}
  existingClaim: ""

volumePermissions:
  enabled: false
  resources:
    limits: {}
    requests: {}
  securityContext:
    runAsUser: 0
    
pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 11
  targetCPU: 50
  targetMemory: 50

postgresql:
  enabled: true
  auth:
    username: openg2p
    password: openg2p
    database: openg2p
    existingSecret: ""
  architecture: standalone
## External PostgreSQL configuration
## All of these values are only used when postgresql.enabled is set to false
## @param externalDatabase.host Database host
## @param externalDatabase.port Database port number
## @param externalDatabase.user Non-root username for Keycloak
## @param externalDatabase.password Password for the non-root username for Keycloak
## @param externalDatabase.database Keycloak database name
## @param externalDatabase.create Enable PostgreSQL user and database creation (when using an external db)
## @param externalDatabase.postgresqlPostgresUser External Database admin username
## @param externalDatabase.postgresqlPostgresPassword External Database admin password
## @param externalDatabase.existingSecret Name of an existing secret resource containing the database credentials
## @param externalDatabase.existingSecretPasswordKey Name of an existing secret key containing the non-root credentials
## @param externalDatabase.existingSecretPostgresPasswordKey Name of an existing secret key containing the admin credentials
##
externalDatabase:
  enabled: false
  host: ""
  port: 5432
  user: bn_odoo
  password: ""
  database: bitnami_odoo
  create: true
  postgresqlPostgresUser: "postgres"
  postgresqlPostgresPassword: ""
  existingSecret: ""
  existingSecretPasswordKey: ""
  existingSecretPostgresPasswordKey: ""

  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    accessMode: ReadWriteOnce
    size: 8Gi

networkPolicy:
  enabled: false
  
  ingress:
    enabled: false
    podSelector: {}
    namespaceSelector: {}

  ingressRules:
    backendOnlyAccessibleByFrontend: false
    customBackendSelector: {}
    accessOnlyFrom:
      enabled: false
      namespaceSelector: {}
      podSelector: {}
    customRules: {}

  egressRules:
    denyConnectionsToExternal: false
    customRules: {}
